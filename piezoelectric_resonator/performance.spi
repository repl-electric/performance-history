load_support('piezoelectric_resonator'); use_bpm 127
alive perc: 1, sop: 0
#init! true
#start_init

# at{
#   sync :unsyncable
#   sleep 0.85
# #  overclock_on :E3

# }
# slow_init
#say :sleep
#overclock_cc motion: 0.27

live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do

    flip :c3, 100, sus: (ing 2.0, 0.5, 0.25,).look if spread(7,11).look
    flip :e3, 100, sus: 1 if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/2.0

    ze (ing :g3, :e3, :a3,).look,z:1 if spread(7,11).look
    ze (nit :g3, 4, :e3, 4, :a3, 4, :g3, 4, :e3, 4, :a3, 4,).look,z:1 if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0

    flop :f3, sus: 2

    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0

    if spread(3,9).rot(1).look
      flop :c3, 100, sus:2
    else
      flop :e3, 80
    end

    sleep 1/2.0
    flop :c4, sus: 1/2.0
    sleep 1/2.0
  end
end

live_loop :glitch, sync: :unsyncable do; tick
  #sync :light
  perc=[1, 1, 1, 1,  1, 1, 1, 1,   1, 1, 1, 0,   0, 0, 0, 1]
  with_bpm 127*(ing 1,).look do
    perc_machine perc
  end
end

burst 0.8


roots_chase force: 40#, freq: 0.2, thick: 0.2, noise: 1,amp: 0.3, drag: 2
live_loop :light, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (ing
      [[:A3], 8],
      [[:F3], 8],
      [[:C3], 4],
      REST4,
      )
    chd = score.look[0]
    sleeps = score.look[-1]

    heat chd,30, sus: sleeps, pads: [0,1]
    deep root(chd), 10,sus: sleeps, drive: 0.0, sat: 0.0

    sleep sleeps
  end
end

live_loop(:unsyncable) do;  sleep 1.0;end
