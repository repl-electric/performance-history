load_support('piezoelectric_resonator'); use_bpm 127
alive perc: 1, sop: 0








# live_loop :testing do
#   tick
#   smp Mountain[/subkick/,1], amp: 4

#   at{ sleep 0.5
#     roots_chase target: (ing :slow).look, drag: 1, force: 10, radius: 0.01, amp: 0.1
#     sleep 0.5
#     roots_chase target: (ing :slow).look, drag: 1, force: 20, radius: 0.01
#     }

#   sleep 3
#   roots_chase target: (ing :start).look, drag: 5, force: 20, radius: 0.01
#   sleep 4+2

# end



#init! true
#start_init
#cam :chase
#create_sea
#zoomout
#stop
#zoomout
#puts $pmode


#cam :chase
#roots_chase target: :start
#create_sea
#create_aura 0

#roots_chase target: :slow, drag: 8, force: 5, freq: 0.15, radius: 0.01
#stop
#roots_chase freq: 0.15, drag: 8.0, throttle: 1.0
#zoomout
#zoomout
#zoomout
#roots_chase radius: 0.01, drag: 5, force: 10, throttle: 1.0, freq: 0.2
#create_sea

#roots_chase drag: 5

#stop
#create_sea
#cam :chase
#zoomout
#stop
# at{
#   sync :unsyncable
#   sleep 0.85
# #  overclock_on :E3

# }
# slow_init
#say :sleep
#overclock_cc motion: 0.27


#fx reverb: 1.00, tube: 1.00

#eject_cpu_core

#create_sea
#burst 0.0
#zoomout
#roots

#cam :top

live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127*1 do
#    kal :c4,80, sus: 2
    flop_cc motion: 0.5
    flip_cc motion: 0.5

    #roots_chase freq: rand*1, amp: 0.1, freq: 0.1
    #flip_cc motion: 0.45
    #flip :c3, 100, sus: 2.0 if spread(2,3).look
    #flip :e3, 50, sus: 1 if spread(3,9).look

    if spread(7,11).look
      if spread(1,4).look
        if dice(8) > 6
          flip :E3, 1*(ing 50 60 70 110).look+20, sus: 1.0#/2.0
          # at{
          #   sleep 1/4.0
          #   flop :E3, 1*(ing 50 60 70 110).look, sus: 2.0#/2.0
          # }
        else
          flip :F3, 1*(ing 50 60 70 110).look+20, sus: 1.0#/2.0
          at{
            sleep 1/2.0
            flop :F3, 1*(ing 50 60 70 110).look+20, sus: 1.0#/2.0
          }
        end
      end
    else
    end

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/2.0

    if spread(7,11).look
      at{
        flip :b2, 100, sus: 1.0/2.0
        sleep 1/4.0 + 1/4.0/2
        flip :b2, 100, sus: 1.0/2.0
        sleep 1/4.0 + 1/4.0/2 + 1/4.0/2/2
        flip :b2, 100, sus: 1.0/2.0
        }
    else
      with_swing((line 0.0, -0.1, 256).look) {
      flip :c3, 100, sus: 1.0
      }
    end

    ze (ing :g3 :e3 :a3).look,z:1 if spread(7,11).look
    ze (nit :g3 4 :e3 4 :a3 4 :g3 4 :e3 4 :a3 4).look,z:1 if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0

    #flip :f3,55, sus: 2.0

    sleep 1/4.0
    sleep 1/4.0

    #flip :e3, 120


    sleep 1/2.0
    sleep 1/2.0

    with_swing -0.1{
    if spread(3,8).rot(1).look
      flop_cc motion: 0.3
      flop :c4, 110-rand*15, sus: 2.0
    else
      flop_cc motion: 0.4
      flop :e3, 60-rand*10, sus: 1.0
    end
    }

    sleep 1/2.0
    #flop :c4,127, sus: 1/2.0
    sleep 1/2.0
  end
end

live_loop :glitch, sync: :unsyncable do; tick
  #sync :light
  perc=[1, 1, 1, 1,  1, 1, 1, 1,   1, 1, 1, 0,   0, 0, 0, 1]
  with_bpm 127*(ing 1 0.5 1 0.5).look do
    perc_machine perc
  end
end

#burst 0.8


#roots_chase drag: 0.1, target: :spiral, force: 50#, freq: 0.2, thick: 0.2, noise: 1,amp: 0.3, drag: 2
live_loop :light, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (ing
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    tick_reset_all
    heat_on chd,30, sus: sleeps, pads: [0,1]
    deep root(chd), 10,sus: sleeps, drive: 0.00, sat: 0.00
#stop
    sleep sleeps
  end
end


#create_sea 1
#sea wave: 2.0, ripple: 0.6, rippleheight: 10

#sea circle: 2.0, sphere: 0.0

live_loop(:unsyncable) do;  sleep 1.0;end
