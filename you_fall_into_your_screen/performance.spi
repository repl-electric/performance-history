ROOT="/Users/josephwilk/Workspace/repl-electric/adventures-in-algorhythm/you_fall_into_your_screen/support"; load "#{ROOT}/midi.rb";load "#{ROOT}/init.rb";use_bpm 127*0.5
#init!
#camlogo logo: 1, off: 1
#bitsea_on :cs4
bitsea_cc motion: 0.10  #╟▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
bitsea_cc octave: 0.55  #╟▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
#bitsea_cc formant: 0.00 #╟▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
#invcol 0
live_loop :playing_piano_through_a_keyhole, sync: :hit do;tick
  live_loop :fall_into_your_screen {stop}
  stop
  dcam3
  with_bpm 63.5 do #63.5
    score=(ing
      D4 Cs4 _ A3 _ E4 _ A4 A4 A4 A4 A4
      D4 Cs4 _ A3 _ B3 _ A4 A4 A4 Fs4 A4
      )
    note=score.look
    future_note=score.look(offset: 1)
    operator note
    callstack note,(ing 70 65 60).look, sus: 2
#    zero_x
    shard 0.2
    sleep 1/2.0

    chd = find_chord future_note


    if spread(1,2).rot(1).look
      with_transpose 0 { zero chd[1],1, sus: 12 }
      with_transpose -12 { zero chd[1],1, sus: 12 }
      with_transpose -12 { zero chd[0],1, sus: 12 }
    else
    end

    if note == D4
    64.times{|n|
      sleep 0.125
      corrupt :e5, 10, sus: 0.125 if n % 8 == 0
      #sleep 0.125
      corrupt (ing :e4 :e4 :e4 :e4).tick(:n), (ing 2 4 6 8).look(:n), sus: 4, mode: 0 if n % 16 == 0
      }
      stop
      end

    sleep 1/2.0

    eek note, sus: 6, mode: 2 if spread(1,3).look

    sleep 1/4.0
  end
end

alivecol 0.5


no{
  qbitsea_cc oct: 0.50
  qbitsea_cc drive: 0.30
  qbitsea_cc charge: 0.50
  qbitsea_cc fm: 0.33
  qbitsea_cc wav: 0.03
  qbitsea_cc wav_amp: 0.30
  qbitsea_cc atk: 0.13
  qbitsea_cc mod: 1.00
  qbitsea_cc motion: 0.24
  qbitsea_cc formant: 0.36
  qbitsea_cc mul: 0.05
  qbitsea_cc bass: 1.00
}


#zero_on :F5
# zero_cc pulse: 0.40
# zero_cc more:  0.30
# zero_cc noise: 0.40
# zero_cc wet:   0.60
#focus 4, 0.1
live_loop :fall_into_your_screen, sync: :unsyncable do; tick

  #corrupt :fs2
  score=(ing
    [:b2  :d5 :fs3]        Zz
    [:fs2  :a4 :cs3]       Zz
    [:a2  :b4  :e4]
    [:d3  :fs5 :a3 :cs5]   Zz
    [:e2  :gs4 :b3]
    [:b2  :d5  :fs3 :cs4]  Zz
    [:fs4 :a4  :cs3]       Zz

    ).look
  with_transpose -12 {cpu2 score[1], 60, sus: 2 }

  score.each_tick(:in){|n|
   qbitsea n, 1.0*(ing 80 70 85 70).look(:in), mode: 0, cutoff: 1.0, sus: 2.5+0.6
  }
  cam4
  exception root(score),127, sus: 2, wet: 0

  pf=50
    i=(method :callstack)
  at{
    i.call(score[0], 60*pf, sus: 4)
    sleep 0.25
    i.call(score[1], 50*pf, sus: 4)
    sleep 0.5
    i.call(score[2], 55*pf, sus: 4)
        sleep 0.5
    i.call(score[3], 70*pf, sus: 2)
        sleep 0.5
    i.call(score[4], 30*pf, sus: 8)
        sleep 0.5
    i.call(score[5], 30*pf, sus: 8)
  }


  sleep 1

  null root(score)

  sleep 1
end
live_loop :by_the_light_of_the_terminal, sync: :unsyncable do
  stop
  with_fx :echo, mix: (ring 0.025+rand*0.1,0.055+rand*0.1,0.03,0.02,0.01).look, phase: (ring 1/4.0, 1/8.0).look do
    8.times{
      tick
      pp=(ing

        D1 _ _ _ _ _ _

        ).look
      smp_dust(pp)
      if pp
        dterrain  (line 0.5, 1.0, 256).tick(:sigh)+rand*0.4

      end
      mt mt_pat.look.look, accent=(line 75, 85, 16*4).look, 100
      mt_cc morph: ((line 0.0, 1.1,16*16*2)+(line 1.1, 0.0, 16*16*2)).look


      sleep 1/8.0
    }
  end
end
live_loop :its_all_just_text_in_a_file, sync: :unsyncable do; tick
  stop
  kick_machine k=(ing
    [KT[1]] _ _ _  TS[8] _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %l{TC[6]} _   _ _ _ _

    K1    _ _ _  TS[8] _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %l{TC[6]} _   _ _ _ _
    ).map{|c| true ? c : c}.look, def: 8, accent: 1.2

  yes{ #please
    if k && spread(1,64).rot(0).look
      bitsea :fs4, sus: 4.0
      cue :hit
      rev :b4,1
    end
  }


  sleep 1/8.0
end



live_loop(:unsyncable) do; sleep 1.0 end
