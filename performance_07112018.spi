load_support('piezoelectric_resonator'); use_bpm 127
#scene 1

#fx tube: 1, reverb: 1


#linecolor cube: rand, s: rand*2, h: rand


zoomout
create_tree
create_bird


#sea circle: 0.0, sphere: 0.0

#roots throttle: 0.01, target: :bird



#eject_cpu_core




live_loop(:unsyncable) do;  sleep 1.0;end
#alive sop: 1, perc: 1, kick: 1

#cam :cube
#fx reverb: 1.00, tube: 0.60
#flop_cc motion: 0.30,  drive: 0.00
#flip_cc motion: 0.50, drive: 0.00
#glitch_cc tubes: 0.50, corode: 0.30

#eject_cpu_core

#smp Words[/matz/], amp: 2
#overclock_on :a3
#overclock_cc oct: 12

#overclock_cc drive: 0, sat: 0, motion: 0.25
#flop_cc motion: 0.3,  drive: 0.00, sat: 0.00
#flip_cc motion: 0.4, drive: 0.00, sat: 0.00

#overclock_cc motion: 0.40


overclock_cc motion: 1.00, drive: 0.75



#roots throttle: 1.0, freq: 3.9
#rocks throttle: 1.0, rotate: 1, orbit: 100, motion: 1


#overclock_x
#stop
live_loop :wind, sync: :unsyncable do; tick
  s=(knit :A4, 128, _, 127, :A5,1).look
#  ze s, (line 127,50,256*4).look, sus: (knit 1/4.0,32,1/2.0,31, 1, 1).look if spread(7*1,11*1).look
  if spread(7*1,11*1).look
    if spread(7*1,11*1*8).look
      ze :A4
      #bitsea :A4, (line 127,100,256).look, sus: 2, hi: 0.85
    else
      ze :C4
    end
  else
    ze :D4
  end
  #qbitsea :A5
  #qbitsea :G3, ((line 20,40,128)+(line 40,20,128)).look, sus: (ing 1/4.0 1/2.0 1/4.0).look if spread(3*4,8*4).look
  #qbitsea :E3, 50, sus: (ing 1/2.0 1 1).look if spread(1*4,8*4).look
  sleep 1/8.0
end

live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  #sync :light
  zero_delay [2,5,6].shuffle
  with_bpm 127*[1.0,1.0].choose do
    kal :E3, (line 5, 30, 32).look#, sus: 6 if spread(1,12).look

    flip :c3, 100, sus: 2.0 if spread(2,3).rot(1).look
    flip :e3, 50, sus: 2.0 if spread(3,9).rot(1).look

    #flip_cc motion: 0.30
    #flop_cc motion: 0.40

    if spread(7,9).look
      if spread(1,4).look
        sleep 1/4.0
        sleep 1/4.0
      else
        #flop :E4, 50, sus: 1.0
        sleep 1/4.0
        sleep 1/4.0
      end
      #flip (knit :A4, 4 ,:F4,4, :E4,8).look, (ing 80 70 60 40).look, sus: 4.0
      sleep 1/2.0
      #flip (ing :f3 :b3 :g3).look, 127-rand*10, sus: 1.0
    else
      #flop :A3, 1*(ing 50 60 70 110).look, sus: 1.0/2.0
      sleep 1/2.0
      #flip :E3, 70, sus: 1.0
      #flip :g3, 30, sus: 4.0
      sleep 1/2.0

      flop_cc motion: 0.4

      #qbitsea :a4, 80, sus: 1
      #flip :g3, 50, sus: 4.0
      flop :A4, 15, sus: 4.0

      at{
        sleep 1/2.0
        #glitch :g3, 50# if spread(1,4).look
        #flop_cc motion: 0.50
        #flip_cc motion: 0.50
        }
    end

    with_swing -0.1 {
      flop :c3, 5.5*(ing 50 60 70 110).look, sus: 1.0/2.0
    }
    #flop_cc motion: 0.45
    sleep 1/4.0
    sleep 1/4.0

    #dark :e3, 110 if spread(1,2).look
    flip  :f3, 55, sus: 2.0
    sleep 1/4.0
    sleep 1/4.0

    #flop_cc motion: 0.48

    #with_swing 0.1 {#((knit -0.1/2.0, 4, 0.1,4).look) {
      #flip :c3, 127-rand*10, sus: 1.0/4.0
      #flip (knit :f3,3,:D4,3,:C4,3).look, 127-rand*20, sus: 1.0#/2.0
    #}

    sleep 1/2.0
    sleep 1/2.0

    #flop :e3, 50-rand*15, sus: 4.0 if spread(1,9).rot(-1).look
    #flop :c4, 50-rand*15, sus: 1.0 if spread(7,9).rot(-2).look

    if spread(3,8).look
      flop_cc motion: 0.3
      flop :c4, 110-rand*15, sus: 2.0
    else
      flop_cc motion: 0.4
      bitsea :f4, 120, sus: 1
      flop :e3, 60-rand*10, sus: 1.0
    end

    sleep 1/2.0
    flop :c4, 127-rand*10, sus: 1.0/2.0
    sleep 1/2.0
  end
end

live_loop :glitch, sync: :unsyncable do; tick
 sync :light
  with_bpm 127*[2.0,2.0].choose do
    if spread(4,8).look
      glitch_cc mode: (ing 0 2 3 5).look
    end
    if spread(8,8).look
      dark :e3, 122
      if spread(3,8).look
        at{
          sleep 0.5
          dark :e3, 110
        }
      end
    end
    glitch_cc corode: 1.0
    glitch :c3, (ing 65 60 60 60).look
    at{
      sleep 0.25
      glitch :c3, 2.1*(ing 120 90 100 100    100 90 90 90).look
    }
    glitch_cc corode: 0.2

    if spread(7,11).look
      if spread(1,4).look
        #glitch :ds3,2# if spread(1,4).look
        sleep 1/4.0
      else
        sleep 1/4.0
        #glitch :as3,1# if spread(1,4).look
        sleep 1/4.0
        #glitch :as3,5# if spread(1,4).look
      end
      sleep 1/2.0
    else
      #glitch :gs3,3# if spread(1,4).look

      sleep 1/2.0
      #glitch :ds3, 127# if spread(1,4).look
      sleep 1/2.0

      #glitch :fs3,20# if spread(1,4).look

      at{
        sleep 1/2.0
        #glitch :g3, 50# if spread(1,4).look
        }
    end

    glitch_cc corode: (ine 0.2 0.7 128).look
    glitch (ing :c3 :a3).look, 30 if spread(7,11).look

    sleep 1/4.0
    #glitch :fs3, 40
    sleep 1/4.0

    sleep 1/4.0
    #glitch :ds3, 127
    sleep 1/4.0

    with_swing 0.1 {#((knit -0.1/2.0, 4, 0.1,4).look) {
      glitch :gs3, 40
    }

    sleep 1/2.0
    #glitch :gs3, 80 if spread(1,8).look
    sleep 1/2.0
    #glitch :gs3, 90 if spread(1,8).look

    #dark :cs3, 20

    sleep 1/2.0
    glitch (ing :cs4 :cs4 :cs4 :d4).look,127
    sleep 1/2.0
  end
end

live_loop :light, sync: :unsyncable do; tick
  with_bpm 127*1.0 do
  score = (ing
    [[:A3 :C5 :E4] 8]
    [[:F4 :A6 :C5] 8]
    [[:C3 :E5 :G4] 8]
    REST4
    [[:A3 :C5 :E4] 8]
    [[:E4 :G5 :B3] 8]
    [[:F4 :A6 :C5 :E5] 8]
    [[:C3 :E5 :G4] 8]
    REST8
    [[:A3 :C5 :E4] 8]
    [[:F4 :A6 :C5] 8]
    [[:C3 :E5 :G4] 4]
    REST4
    [[:A3 :C5 :E4] 4]
    [[:A3 :C5 :E4] 4]
    [[:E4 :G5 :B3] 4]
    [[:E4 :G5 :B3] 4]
    [[:G4 :B6 :D5 :F4] 8]
    [[:C4 :E5 :G4] 8]
    REST8
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    heat chd[0], 1.0*(ing 10 30 50 10  10 30 40 50).look, sus: sleeps, pads: [0,1,2,3], sat: 0.00, drive: 0.00
    deep root(chd), 120, sus: (sleeps)*2, drive: 0.50, sat: 0.00
    sleep sleeps
  end
end

vortex throttle: 0.0
rocks throttle: 1, orbit: 100
#zoomout
roots  throttle: 0.1, drag: 3.4, freq: 0.5, target: :cube, chase: 1
