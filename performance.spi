load_support('piezoelectric_resonator'); use_bpm 127
alive perc:0,sop:0


live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do

    flop :c3, 100, sus: 2 if spread(2,3).rot(1).look
    flop :e3, 50, sus: 2 if spread(3,9).rot(1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/2.0

    if spread(7,9).look
    else
      flop :a4, 15, sus:4
    end


    with_swing -0.1 {
      #flop :c3, 5.5*(ing 50 60 70 110).look, sus: 1.0/2.0
    }


    sleep 1/4.0
    sleep 1/4.0

    flip  :f3, 55, sus: 2.0

    sleep 1/4.0
    sleep 1/4.0

    with_swing 0.1 {#((knit -0.1/2.0, 4, 0.1,4).look) {
      #flip :c3, 127-rand*10, sus: 1.0/4.0
     # flip (knit :f3,3,:D3,3,:C3,3).look, 50-rand*20, sus: 1.0#/2.0
    }


    sleep 1/2.0
    sleep 1/2.0

    if spread(3,8).look
      flop_cc motion: 0.3
      flop :c4, 110-rand*15, sus: 2.0
    else
      flop_cc motion: 0.4
      bitsea :f4, 120, sus: 1
      flop :e3, 60-rand*10, sus: 1.0
    end

    sleep 1/2.0
    flop :c4, 127-rand*10, sus: 1.0/2.0

    sleep 1/2.0
  end
end

live_loop :glitch, sync: :unsyncable do; tick
  #sync :light
  with_bpm 127*(ing 1).look do
    if spread(4,8).look
      glitch_cc mode: (ing 0 2 3 5).look
    end
    if spread(8,8).look
      #dark :e3, 122
      if spread(3,8).look
        at{
          sleep 0.5
          #dark :e3, 110
        }
      end
    end
    glitch_cc corode: 1.0
    #glitch :c3, (ing 65 60 60 60).look
    at{
      sleep 0.25
      #glitch :c3, 2.1*(ing 120 90 100 100    100 90 90 90).look
    }
    glitch_cc corode: 0.2

    if spread(7,11).look
      if spread(1,4).look
        #glitch :ds3,2# if spread(1,4).look
        sleep 1/4.0
      else
        sleep 1/4.0

        #glitch :as3,1# if spread(1,4).look
        sleep 1/4.0
        #glitch :as3,5# if spread(1,4).look
      end
      sleep 1/2.0
    else
      #glitch :gs3,3# if spread(1,4).look

      sleep 1/2.0
      #glitch :ds3, 127# if spread(1,4).look
      sleep 1/2.0

      #glitch :fs3,20# if spread(1,4).look

      at{
        sleep 1/2.0
        #glitch :g3, 50# if spread(1,4).look
        }
    end

    glitch_cc corode: (ine 0.8 0.9 128).look
    #glitch (ing :c3 :a3).look, 30 if spread(7,11).look

    sleep 1/4.0
    #glitch :fs3, 40
    sleep 1/4.0

    sleep 1/4.0
    #glitch :ds3, 127
    sleep 1/4.0

    with_swing 0.1 {#((knit -0.1/2.0, 4, 0.1,4).look) {
      #glitch :gs3, 40
    }

    sleep 1/2.0
    #glitch :gs3, 80 if spread(1,8).look
    sleep 1/2.0
    #glitch :gs3, 90 if spread(1,8).look

    #dark :cs3, 20

    sleep 1/2.0
    #glitch (ing :cs4 :cs4 :cs4 :d4).look,127
    sleep 1/2.0
  end
end

roots_chase force: 20, freq: 0.2, thick: 0.2, noise: 1,amp: 0.3, drag: 2
live_loop :light, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (ing
      [[:A3] 4]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    sleep sleeps
  end
end

live_loop(:unsyncable) do;  sleep 1.0;end
