load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 1, kick: 1


# at{
#   sync :Attune
#   sleep 1.25
#   flop_on :d3
# }

#flop_cc drive: 0.00
#
at{
  sync :Attune
 # voltage :c4,127, sus: 4
 # voltage :f4,127
  operator :C4,110, sus: 12
 # resonate :A1, sus: 12
  sleep 3
  sleep 1.0/2.0
  overclock_on :a2
}



#  glitch :ds4, 127
stop


live_loop :Attune, sync: :unsyncable do; tick
  silence!
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.27 0.5 32).look, pitch: 1.2
    flop :a3,  sus: (cycle 0.0 0.5 1).look, min: 0 if spread(1,1).look
    flop :e3,  sus: (cycle 0.0 0.5 1).rot(-1).look if spread(1,1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if spread(3,8).look
    flop :c3, sus: 2
    else
      flop :e3, sus: 2
    end

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0
    flop :C4, sus: 1/2.0
    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0)
  with_bpm 127*(cycle 1).look do
    perc_machine perc.to_a
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:a3] 8]
      [[:f3] 8]
      [[:c3] 4]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,1, sus: sleeps, pads: [0], sat: 0, drive: 0



    sleep sleeps/2.0
    operator chd[-1],90, sus: 12
    with_swing((flow 0.0 sleeps/4.0 32).look){
      voltage :e4
      operator chd[-2]+12+12, 90, sus: 12
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
