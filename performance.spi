load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 1, kick: 1

# at{
#   sync :Attune
#   sleep 6
#   flop_on :b3
# }
fx tube: 0.40, reverb: 0.40

# at{
#   sync :Attune
#   sleep 1.0/8.0
#   overclock_on :e3
# }
#flop_off :b3
#livecode :sleep

#recover

overclock_cc attune: 0.00

#roots_chase target: :start, force: 140

live_loop :Attune, sync: :unsyncable do; tick
  silence?
  zero_delay [2,5,6].shuffle
  overclock_cc oct: (cycle 0 -12 0 19).look

  with_bpm 127*2 do
    flop_cc motion: (flow 0.37,0.5 32).look, drive: 0
#    flip_cc motion: 0.40
    overclock :d4, sus: 4

    flip :a3, sus: (cycle 0.25 0.5 1).look, tube: 0, drive: 0 if spread(7,11).look
    flip :e3, sus: (cycle 0.25 0.5 1).rot(-1).look, tube: 0, drive: 0 if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
 #   flip :f3, sus: 4
    sleep 1/4.0
    sleep 1/4.0

    if spread(3,8).look
  #    flop_cc motion: 3

  #    flop :c3,127, sus: 1/2.0
    else
   #   flop :e3,127, sus: 1/2.0
    end



    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    #create_aura
    flop :c4,127, sus: 1/2.0

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions

  perc=(cycle 1 1 1 1)
  with_bpm 127*(cycle 0.5).look do
#    perc_machine perc.to_a
    sea circle: rand*0.2
    aura ping: rand, scale: rand*1.5
  end
end
 # zoomout
# create_sea
#unity "/lights/end",0.0

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 8]
      [[:E4 :G5 :B3] 8]
      [[:F4 :A6 :C5 :E5] 8]
      [[:C3 :E5 :G4] 8]
      [Zz 8]

      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 4]
      [[:A3 :C5 :E4] 4]
      [[:E4 :G5 :B3] 4]
      [[:E4 :G5 :B3] 4]
      [[:G4 :B6 :D5 :F4] 8]
      [[:C4 :E5 :G4] 8]
      [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,1, sus: sleeps, pads: [0], sat: 0, drive: 0.00
    sleep sleeps/2.0

    control_unit root(chd), 10,sus: sleeps, drive: 0.00, sat: 0.00

    #voltage :e4
    with_swing((flow 0.0 sleeps/4.0 32).look) {
      operator chd[-1], 90, sus: 12
    }

    sleep sleeps/2.0

  end
end

live_loop(:unsyncable)do;sleep 1.0;end
