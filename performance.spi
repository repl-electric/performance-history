load_support('piezoelectric_resonator'); use_bpm 127
alive perc: 1, sop: 0
#init! true
#start_init
#overclock_x
# at{
#   sync :ModularSynthsControlledByCode
#   overclock_on :A3, 1
#   sleep 1
#   overclock_on :E3,1
#   sleep 2
#   overclock_on :F3,1
# }

live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.27 0.6 32).look
    #E C G
    flop x=(vec
          :a2  :a2  :f2  :f2 #12
          :f2  :f2  :b2  :e2
          #:E2  :D2  #:E2 :E2
      ).look,80, sus: 4.1
    puts x
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/2.0

    # A F C

    with_transpose (dice(8) > 6 ? 12 : 19 ) {
    if spread(8,11).look
      ze x=(vec :g4 :a4 :e4).tick(:in),1, z: 1, sus: (vec 2 4).look, star: true
#      puts "ZE: #{x}"
    end
      x=(vec :f3 :a3 :g3 :a3).tick(:in)
      ze x, 127, z: 1, sus: 1.0
      }
    if spread(3,8).look
      #ze (nit :g3 4 :A3 4 :e3 4 :g3 4 :A3 4 :c4 4).look, sus: 4, y: 1
      #puts "ZE: #{(nit :g3 4 :A3 4 :e3 4 :g3 4 :A3 4 :c4 4).look}"
    end

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    #flop :B3,100, sus: 1.0

    sleep 1/2.0
    sleep 1/2.0

    #flop :D4,100, sus: 1.0/2.0

    sleep 1/2.0
    sleep 1/2.0
  end
end

live_loop :glitch, sync: :unsyncable do; tick
  #sync :light
  perc=[0, 0, 0, 0,  0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0]
  with_bpm 127*(vec 1).look do
    perc_machine perc
  end
end


#roots_chase force: 20, freq: 0.2, thick: 0.2, noise: 1,amp: 0.3, drag: 2
live_loop :light, sync: :unsyncable do; tick
  with_bpm 127*1.0 do
    score = (vec
      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:B3 :D5 :F4] 4]
      # #[[:E3 :C4 :G4] 4]
      # [Zz 4]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :b4 :d4] 4]

      # [Zz 4]

      [[:A3 :C5 :Es4] 2]
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:B3 :D5 :F4] 2]
      [[:E3 :C4 :A4] 8]

      [Zz 2]



      )
    chd = score.look[0]
    sleeps = score.look[-1]
    #heat chd,1, sus: sleeps, pads: [0]
    puts "HEAT: #{chd[-1]},  #{chd[-2]}" if chd[0]
    with_swing 0.1 {
      midi chd[-1],85, channel: 16,sus: sleeps
    }
    midi chd[-2],85, channel: 16,sus: sleeps
    sleep sleeps/2.0
    #midi chd[0], 75, channel: 16,sus: sleeps
    sleep sleeps/2.0
  end
end

live_loop(:unsyncable) do;  sleep 1.0;end
