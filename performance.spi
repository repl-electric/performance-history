load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 0, pitch: 1, kick: 1
#world time: 1.0
#init true
#flop_on :D2

unity "/cam0/glitch_j", 0.9
#unity "/cam0/glitch_v", 0.0
livecode :begin


#cam :top
#unity "/endshard/throttle",0.0
##zoomout
#eject_cpu_core
#world time: 1.0
stop

# at{
#   sync :Attune
#   sleep 6
#   flop_on :B3
# }
#create_aura

at{
#  sync :Attune
  sleep 3
#  overclock_on :f3
#  livecode :raise
}

#livecode :sleep
#overclock_cc attune: 0.45, drive: 0.31

#recover
#fx reverb:  1.00, drive: 1.00

#escape


#quick

#3 2 1
#eject_cpu_core


#cam :top

live_loop :Attune, sync: :unsyncable do; tick
  #silence?
  zero_delay [2,5,6].shuffle
  overclock_cc oct: (cycle 12  24).look
  overclock :c4, sus: 4
  with_bpm 127*4 do
    roots_chase freq: rand*2, amp: 0.2
    kal :g4
    flop_cc motion: (flow 0.46 0.6, 32).look, drive: 0.35
    flip_cc motion: 0.41, drive: 0.40

    flip :c4, sus: (cycle 0.25 0.5 1).look if spread(7,11).look
    flip :e4, sus: (cycle 0.25 0.5 1).rot(-1).look if spread(3,8).look

    if spread(7,11).look
 #     flop :g3,100, sus: 4
    end


    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if !spread(7,11).look
#      flop :a3,100, sus: 4
    end

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0


    if spread(3,8).look
      flop_cc motion: 0.3
      flop :c3,100, sus: 4
    else
      flop_cc motion: 0.4
      flop :e3,90, sus: 2
    end

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :c4, sus: 1/2.0

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  1 1 1 0  1 0 0 0  0 0 0 0)
  with_bpm 127*(cycle 0.25 0.5 0.25 0.25).look do
    perc_machine perc.to_a
    sea circle: rand*0.1
    aura ping: rand, scale: rand*0.9
  end
end

# zoomout
# create_sea

roots_chase target: :spiral, force: 100, drag: 2

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 8]
      [[:E4 :G5 :B3] 8]
      [[:F4 :A6 :C5 :E5] 8]
      [[:C3 :E5 :G4] 8]
      [Zz 8]

      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 4]
      [[:A3 :C5 :E4] 4]
      [[:E4 :G5 :B3] 4]
      [[:E4 :G5 :B3] 4]
      [[:G4 :B6 :D5 :F4] 8]
      [[:C4 :E5 :G4] 8]
      [Zz 8]

      )

    tick_reset_all
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate_on chd,1, sus: sleeps, pads: [0,1,2], sat: 0.00, drive: 0.00
    control_unit root(chd), 10,sus: sleeps, drive: 1.00, sat: 1.00

    sleep sleeps/2.0
#    voltage :e4
    with_swing((flow 0 sleeps/4.0 32).look) {
      operator chd[-1]+12, 88, sus: 12
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end



#livecode :end
vol 0
