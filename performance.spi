load_support('piezoelectric_resonator'); use_bpm 127
alive perc: 1, sop: 0
#init! true
#start_init

#cam :chase
#linecolor factor: -10
create_sea -2
  create_tree -2
  create_cube 3
  sea ripple: 13.0
  burst 1.0
  linecolor factor: -10
  rocks orbit: 200.0, throttle: 1.0
  star life: 5, size: 10.0 #4


stop

#flop_on :D2
#overclock_cc motion: 0.27
#cam :chase

live_loop :testvec do
  tick
  smp Mountain[/subkick/,1], amp: 4

  at{ sleep 0.5
    roots_chase target: (vec :slow).look, drag: 1, force: 10, radius: 0.01, amp: 0.1
    sleep 0.5
    roots_chase target: (vec :slow).look, drag: 1, force: 20, radius: 0.01
    }

  sleep 3
  roots_chase target: (vec :start).look, drag: 5, force: 20, radius: 0.01
  sleep 4+2

end




live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.2 0.5 32).look
    flip_cc motion: 0.3

    flip :C3, 120, sus: 1/2.0
    flip :E3, 120, sus: 1/2.0 if spread(7,11).look

    if spread(7,11).look
      flop :A3, 100, sus: 4
    end

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/2.0

    if spread(7,11).look

    else
      flop :G3, 100, sus: 4
    end

    ze (vec :g2 :A2 :F2).look if spread(7,11).look
    ze (nit :g4 4 :A4 4 :F4 4  :g4 4 :A4 4 :C4 4).look if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0

    if spread(3,8).look
      flop_cc motion: 0.5
      flop :C4, 80, sus: 2
    else
      flop_cc motion: 0.4
      flop :E3, 80, sus: 2
    end

    sleep 1/2.0

    flop :C4, 120, sus: 1/2.0
    sleep 1/2.0
  end
end
#zoomout

live_loop :glitch, sync: :unsyncable do; tick
  #sync :light
  perc=[1, 1, 0, 0,  0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0]
  with_bpm 127*(vec 1).look do
    perc_machine perc
  end
end

#roots target: :start, drag: 4, freq: 0.1, amp: 0.2, radius: 0.1

#roots_chase force: 20, freq: 0.2, thick: 0.2, noise: 1,amp: 0.3, drag: 2
live_loop :light, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (vec
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 8]
      [[:E4 :G5 :B3] 8]
      [[:F4 :A6 :C5 :E5] 8]
      [[:C3 :E5 :G4] 8]
      [Zz 8]

      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 4]
      [[:A3 :C5 :E4] 4]
      [[:E4 :G5 :B3] 4]
      [[:E4 :G5 :B3] 4]
      [[:G4 :B6 :D5 :F4] 8]
      [[:C4 :E5 :G4] 8]
      [Zz 8]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    heat chd,100, sus: sleeps, pads: [0]
    deep root(chd), 50,sus: sleeps, drive: 1.00, sat: 1.00

    sleep sleeps
  end
end

live_loop(:unsyncable) do;  sleep 1.0;end
