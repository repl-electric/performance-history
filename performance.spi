load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 1, kick: 0


#world time: 1.00
#overclock_cc attune: 0.50


#recover

#stop
at{
  sync :Attune
  sleep 4
#  overclock_on :f3, motion: 0.5
#  flop_x :b3#, 120#, sus: (cycle 1).look if spread(1,1).look
}

#overclock_cc motion: 0.27

#cam :top

fx reverb: 1.00, drive: 0.81
#zoomout
roots_chase target: :spiral, force: 150, drag: 0.5
live_loop :Attune, sync: :unsyncable do; tick
  overclock_cc oct: (cycle 0 24).look, drive: 0.58
  flip_cc motion: 0.4, drive: 0.61
  flop_cc drive: 0.40
  overclock :g4, sus: 4
  silence?
  zero_delay [2,5,6].shuffle
  with_bpm @bpm=(127*4) do
    flop_cc motion: (flow 0.4 0.5 32).look
    flop :g3, sus: (cycle 0.25 0.5 1).look
    flip :e3, sus: (cycle 0.25 0.5 1).rot(-1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :c4,127, sus: 1/2.0

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 0 1 0  0 1 0 1  1 0 0 0  0 0 0 0)
  with_bpm 127*(cycle 1).look do
    perc_machine perc.to_a
    sea circle: rand
    aura scale: rand*0.9
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      # [[:A3 :C5 :E4] 8]
      # [[:E4 :G5 :B3] 8]
      # [[:F4 :A6 :C5 :E5] 8]
      # [[:C3 :E5 :G4] 8]
      # [Zz 8]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :E5 :G4] 4]
      # [Zz 4]
      # [[:A3 :C5 :E4] 4]
      # [[:A3 :C5 :E4] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:G4 :B6 :D5 :F4] 8]
      # [[:C4 :E5 :G4] 8]
      # [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd[0]+12,1, sus: sleeps, pads: [0,1,2], sat: 0, drive: 0

##    control_unit root(chd), 10,sus: sleeps, drive: 1.00
 #   , sat: 0.80
#    at{sleep 0.5; create_sea; sleep 0.5; cam :chase}

    #create_aura
    sleep sleeps/2.0

    with_swing((flow 0.0 sleeps/2.0 64).look){
#      overclock :f4, 10, motion: rand*0.5
 #     resonate :f1,127, sus: sleeps*4, pads: [2], sat: 0, drive: 0
#      voltage chd[0],0
    }


    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
