load_support('piezoelectric_resonator'); use_bpm 127
#alive perc: 1, sop: 0
#init! true
#start_init
class Score
  def initialize(a)
    @a ||= a
  end
  def voice(opts)
    @a.map{|section|
      chd = section[0]
      open_chd = chd.to_a
      open_chd[1] = chd[1] + opts[:open] * 12
      [open_chd.ring, section[-1]]
    }
  end
end
def compose(pat)
  Score.new(pat.map{|root| [chord(root[0]), root[-1]]})
end

#flop

#stop

live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    silence?
   # flip :A3

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/2.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0

    sleep 1/2.0
    sleep 1/2.0
  end
end

live_loop :glitch, sync: :unsyncable do; tick
  #sync :light
  perc=(cycle 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1,)
  with_bpm 127*(cycle 1,).look do
    perc_machine perc.to_a
  end
end

#roots_chase force: 20, freq: 0.2, thick: 0.2, noise: 1,amp: 0.3, drag: 2
live_loop :light, sync: :unsyncable do; tick
  with_bpm 127*1 do
  #  score = (cycle
 #,     compose(:a2,).style(open:2) # [[_] 8]
    #    )
    score = compose((cycle [:a2, 4], [:C2, 4],)).voice(open: 3)
    chd = score.look[0]
    sleeps = score.look[-1]
    puts chd
    flop chd[0]

    sleep sleeps
  end
end

live_loop(:unsyncable) do;  sleep 1.0;end
