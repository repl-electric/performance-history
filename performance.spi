load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 1, kick: 0
#init true && start_init

at{
  sync :Attune
  sleep 3
#  flop_on :A3
}

live_loop :Attune, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.0 0.57 32).look
    flop :A3, sus: (cycle 0.25 0.5 1).look
    flop :E3, sus: (cycle 0.25 0.5 1).rot(-1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :C4

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0)
  with_bpm 127*(cycle 1).look do
    #    perc_machine perc.to_a
    with_swing((flow 0.0 1/4.0 16*4).look){
      glitch :c3, 120 if spread(7,12).look
      if dice(8) > 6 && spread(1,8).rot(-1).look
        glitch :f3, 100
      end
      glitch_cc corode: rand+0.5
    }

    sleep 1/4.0
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:f2] 8]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd[0]+12,1, sus: sleeps, pads: [0], sat: 0, drive: 0

    sleep sleeps/2.0
    with_swing((flow 0.0 sleeps/2.0 64).look){
      overclock :d3, 15, sus: 1/8.0
      resonate :f3,105,  sus: sleeps*4,  pads: [3], sat: 0, drive: 0.70
      resonate :gs3,120, sus: sleeps*2, pads: [2], sat: 0, drive: 0
    }
    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
