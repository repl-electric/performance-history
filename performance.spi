#
load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1



























unity "/dark", 1.0


#init true
#stop
#flop_on :d2, 127

#
# fx tube: 1.00, reverb: 1.00

eject_cpu_core
stop
#unity "/camtop/jitter",0.2
#unity "/camtop/phase",0.9




# #world time: 1.0

# unity "/camtop/jitter",11.001
# unity "/camtop/phase",1.01

# #fx reverb: 1.00, drive: 1.00
 #unity "/rockvortex", 1.0
 unity "/eyelids",0
 vortex throttle: 0.0
 #star life: 1.0
 unity "/cube",0.0
 cam :top






#create_cube -2

#vortex
stop
#.... nearly...
#eject_cpu_core

at{
#  sync :unsyncable
#  sleep 1/6.0
#  overclock_on :f3
 # slow_init
#  livecode :raise
}
#overclock_cc attune: 0.50
#livecode :sleep




#cam :top

#recover
#create_sea
#roots_chase target: :spiral, force: 110
live_loop :Attune, sync: :unsyncable do; tick
#  silence?
  zero_delay [2,5,6].shuffle
  with_bpm 127*6 do
    kal :c4, 5
    flop_cc motion: (flow 0.50 0.57 32).look, drive: 0.66
    flip_cc motion: 0.50
    flip :a4, 127, sus: (cycle 0.25 0.5 1).look, drive: 0.65 if spread(7,11).look
    flip :e3, 127, sus: (cycle 0.25 0.5 1).rot(-1).look if spread(3,8).look

    if spread(7,11).look
#      flop :a3, 90, sus: 2
    else

    end


    sleep 1/4.0
    sleep 1/4.0

#    flip :e4, 80, sus: 1

    sleep 1/4.0
    sleep 1/4.0
    #create_cube

   if spread(7,11).look

    else
 #    flop :g3, 90, sus: 2
    end


    roots_chase freq: rand*2, amp: 0.1


    alu (cycle :g3 :a3 :e3).look, z:1 if spread(7,11).look
    alu (cycle_rep :g3 4 :a3 4 :e3 4 :g3 4 :a3 4 :c4 4).look, z:1 if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if spread(3,8).look
      flop_cc motion: 0.3
  #    flop :c4, 100, sus: 2
    else
      flop_cc motion: 0.4
   #   flop :e3, 90, sus: 1
    end

    sleep 1/2.0
    sleep 1/2.0

    sleep 1/2.0

    fn = [(method :flop), (method :flip)].choose
    fn.(:c4,127, sus: 1/2.0)
    sleep 1/2.0
#    flop :c4,127, sus: 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 0)
  with_bpm 127*(cycle 0.5 0.25 1).look do
    #    perc_machine perc.to_a
    sleep 1
  end
end
#create_sea
#cam :chase
#zoomout
#roots_chase target: :slow
live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 8]
      [[:E4 :G5 :B3] 8]
      [[:F4 :A6 :C5 :E5] 8]
      [[:C3 :E5 :G4] 8]
      [Zz 8]

      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 4]
      [[:A3 :C5 :E4] 4]
      [[:E4 :G5 :B3] 4]
      [[:E4 :G5 :B3] 4]
      [[:G4 :B6 :D5 :F4] 8]
      [[:C4 :E5 :G4] 8]
      [Zz 8]

      REST4
      )
    tick_reset_all
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate_on chd,100, sus: sleeps, pads: [0,1,2], sat: 0.30, drive: 0.40
    control_unit root(chd), 100,sus: sleeps, drive: 0.90, sat: 0.90
    stop
    sleep sleeps/2.0
    with_swing sleeps/4.0 {
      voltage :f4, 10
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end



#livecode :end
vol 0.0
