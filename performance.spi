load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 0, pitch: 1, kick: 0

 at{
   sync :Attune
#  sleep 3
#  operator :b5,105
#  sleep 3
#  overclock_on :f3
#   flop_on :g3
 }

#ahahahahahg

#livecode :sleep
#overclock_cc motion: 0.27

#flop_x


live_loop :Attune, sync: :unsyncable do; tick
  silence?
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.0, 0.5, 32,).look
    flip :a3,127, sus: (cycle 0.25, 0.5, 1,).look if spread(7,11).look
    flip :e3,127, sus: (cycle 0.25, 0.5, 1,).rot(-1).look if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if spread(3,8).look
      flop :c4
    else
      flop :e3
    end



    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :c4,sus: 1/2.0

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,)
  with_bpm 127*(cycle 1,).look do
    perc_machine perc.to_a
  end
end

#create_aura
##cam :chase
#zoomout
live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3, :C5, :E4], 8],
      [[:F4, :A6, :C5], 8],
      [[:C3, :E5, :G4], 4],
      [Zz, 4],
      #, [[:A3, :C5, :E4], 8],
      #, [[:E4, :G5, :B3], 8],
      #, [[:F4, :A6, :C5, :E5], 8],
      #, [[:C3, :E5, :G4], 8],
      #, [Zz, 8],

      #, [[:A3, :C5, :E4], 8],
      #, [[:F4, :A6, :C5], 8],
      #, [[:C3, :E5, :G4], 4],
      #, [Zz, 4],
      #, [[:A3, :C5, :E4], 4],
      #, [[:A3, :C5, :E4], 4],
      #, [[:E4, :G5, :B3], 4],
      #, [[:E4, :G5, :B3], 4],
      #, [[:G4, :B6, :D5, :F4], 8],
      #, [[:C4, :E5, :G4], 8],
      #, [Zz, 8],


      )
    create_sea
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,1, sus: sleeps, pads: [0], sat: 0, drive: 0
    sleep sleeps/2.0
    operator chd[-1], sus: 12

    control_unit root(chd), 10,sus: sleeps, drive: 0.0, sat: 0.0



    with_swing((flow 0.0, sleeps/4.0, 32,).look){
      voltage :f4
      operator chd[-2]+12, sus: 12
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
