load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 0, pitch: 0, kick: 0
#

#world time: 1
#overclock_cc attune: 0.43, sync: 1

fx reverb: 0.60

live_loop :Attune, sync: :unsyncable do; tick
  silence? #please no
  zero_delay [2,5,6].shuffle
  with_bpm @bpm=(127*4) do
    overclock :f4, 15, sus: 3#, motion: 0.4
    overclock_cc oct: (cycle 19 0 24).look, drive: 0.31

#    tick_reset_all
    flop_cc motion: (flow 0.5 0.57 32).look, drive: 0.50
    flip_cc motion: 0.55, drive: 0.42

    flip :g4, 100, sus: (cycle 0.25 0.5 1).look if spread(5,8).look
    flop :e4, 110, sus: (cycle 0.25 0.5 1).rot(-1).look# if spread(3,8).look

#    flop :b3, 95 if spread(7,11).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

 #   flop :g4, 85, sus: 2 if !spread(7,11).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :e3, 100, sus: (cycle 2).look if !spread(3,8).look
    flop :c4, 110, sus: (cycle 2).look if spread(3,8).look

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :e4, 120, sus: (cycle 1/2.0).look if spread(1,1).look

    sleep 1/2.0
  end
end

#roots_chase target: :spiral ,force: 100.0

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1)
  with_bpm @bpm=(127*(cycle 1 0.5 0.5 1).look) do
    perc_machine perc.to_a
    at{sleep 0.5; sea circle: rand; aura scale: rand*1.8}
  end
end


live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      # [[:A3 :C5 :E4] 8]
      # [[:E4 :G5 :B3] 8]
      # [[:F4 :A6 :C5 :E5] 8]
      # [[:C3 :E5 :G4] 8]
      # [Zz 8]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :E5 :G4] 4]
      # [Zz 4]
      # [[:A3 :C5 :E4] 4]
      # [[:A3 :C5 :E4] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:G4 :B6 :D5 :F4] 8]
      # [[:C4 :E5 :G4] 8]
      # [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd[0]+12+12,10, sus: sleeps, pads: [0], sat: 0, drive: 0
    control_unit root(chd), 14,sus: sleeps, drive: 0.73, sat: 0.0

#    at{sleep 0.5; create_sea; sleep 0.5; cam :chase}

    sleep sleeps/2.0

    with_swing((flow 0.0 sleeps/2.0 64).look){
      # overclock :f4, 18, sus: 1/4.0, motion: rand*0.5
      # resonate chd[0],100, sus: sleeps/2.0, pads: [2], sat: 0, drive: 0.70 #emacs power
    }

    sleep sleeps/2.0
  end
end

#recover

live_loop(:unsyncable)do;sleep 1.0;end
