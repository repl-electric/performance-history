load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 1, kick: 1
#init true && start_init

# at{
#   sync :Attune
#   sleep 3
#   flop_on :g3
# }

# at{
#   sync :Attune
#   sleep 3
#   alive perc: 0
#   overclock_on :f3
# }

overclock_cc motion: 0.27, fm: 0.00, drive: 0.55

live_loop :Attune, sync: :unsyncable do; tick
  overclock_cc oct: (cycle 0 -12 0 19).look

  silence?
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: x=(flow 0.0 0.57 32).look, drive: 0.35

    flip :a3, sus: (cycle 0.25 0.5 1).look, drive: 0.40
    flip :e3, sus: (cycle 0.25 0.5 1).rot(-1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    glitch_cc mode: (cycle 1 2 3 4 5 6 7).choose

    flop :c4, sus: 1/2.0

    sleep 1/2.0
  end
end

def perc_machine(pat)
  if spread(4,8).look
    glitch_cc mode: (ring 0, 2, 3, 5).look
  end
    if spread(8,8).look
      if spread(3,8).look
        at{
          sleep 0.25
          dark :e3, ring(122, 100, 110, 90).look-(rand*5) if pat[-1]!=0
        }
        at{
        sleep 0.47
        puts :hit
        dark :b3, 60 if pat[-1]!=0
        sleep 0.53
        dark :b3, 58 if pat[-1]!=0
        }
      else
        dark :e3, ring(122, 100, 110, 90).look-(rand*5) if pat[-1]!=0
      end
    end
    glitch_cc corode: 1.0
    glitch :c3, (ring 65, 60, 60, 60).look if pat[0]!=0
    at{
      sleep 0.25
      glitch :c3, 2.1*(ring 120, 90, 100, 100,    100, 90, 90, 90).look if pat[1]!=0
    }
    glitch_cc corode: 0.8

    if spread(7,11).look
      sleep 1
    else
      #glitch :gs3,3# if spread(1,4).look

      sleep 1/2.0
      glitch :ds3, 127 if state[:perc] && pat[2]!=0 #if spread(1,4).look
      sleep 1/2.0

      glitch :fs3,20 if state[:perc] && pat[3]!=0# if spread(1,4).look

      at{
        sleep 1/2.0
        glitch :g3, 50 if pat[4]!=0# if spread(1,4).look
        }
    end

    glitch_cc corode: (line 0.8, 0.9, 128).look
    #glitch (ring :c3, :a3).look, 30 if spread(7,11).look

    sleep 1/4.0
    if dice(32) > 29
      glitch :fs3, 40 if pat[1]!=0
    end
    sleep 1/4.0

    sleep 1/4.0
    if dice(32) > 28
      glitch :ds3, 127 if pat[0]!=0
    end
    sleep 1/4.0


    with_swing 0.1 {#((knit -0.1/2.0, 4, 0.1,4).look) {
      glitch :gs3, 40 if pat[5]!=0
    }

    sleep 1/2.0
    glitch :gs3, 80 if spread(1,8).look
    sleep 1/2.0
    glitch :gs3, 90 if spread(1,8).look

    #dark :cs3, 20

    sleep 1/2.0
    glitch (ring :cs4, :cs4, :cs4, :d4).look,127 if pat[6] !=0
    sleep 1/2.0
end


live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 0 0  1 0 0 0  0 0 0 0  0 0 0 1)
  with_bpm 127*(cycle 1).look do
    perc_machine perc.to_a
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      #      [[:C3 :d4 :f3] 8]
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 8]
      [[:E4 :G5 :B3] 8]
      [[:F4 :A6 :C5 :E5] 8]
      [[:C3 :E5 :G4] 8]
      [Zz 8]

      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 4]
      [[:A3 :C5 :E4] 4]
      [[:E4 :G5 :B3] 4]
      [[:E4 :G5 :B3] 4]
      [[:G4 :B6 :D5 :F4] 8]
      [[:C4 :E5 :G4] 8]
      [Zz 8]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,4, sus: sleeps, pads: [0], sat: 0, drive: 0

    control_unit root(chd), 100,sus: sleeps, drive: 0.0, sat: 0.0

    sleep sleeps/2.0
    #operator chd[-1]+12,100, sus: 12

    with_swing((flow 0.0 sleeps/4.0 32).look) {
      #voltage :f4
      operator chd[-2]+12,100, sus: 12
    }



    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
