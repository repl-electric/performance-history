load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 0, kick: 0

#lets bring it back to life


#world time: 1.0
#overclock_cc attune: 0.50, sync: 1


#its out of control!!!!!!

#recover #please oh please


#lets see what error brings us
#lets crash the server!

#roots_chase target: :spiral ,force: 100.0

at{
  sync :Attune
  sleep 1.5
#  overclock_on :f3,50, motion: 0.55
}

#livecode :sleep
#overclock_cc motion: 0.27
#zoomout

#livecode :raise

#flop_x

#livecode :begin

live_loop :Attune, sync: :unsyncable do; tick
  silence?  #please maybe
  zero_delay [2,5,6].shuffle
  with_bpm @bpm=(127*2) do
    flop_cc motion: (flow 0.35, 0.5, 32,).look, drive: (flow 0.0, 0.3, 32,).look
    flip_cc motion: 0.4

    flip :g4, 42, sus: (cycle 0.25, 0.5, 1,).look if spread(5,8).look
    flop :e3, 30, sus: (cycle 0.25, 0.5, 1,).rot(-1).look if spread(1,1).look

    flop :b3, 60, sus: (cycle 1,).look if !spread(7,11).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :g4, 60, sus: (cycle 1,).look if spread(7,11).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :e3, 65, sus: (cycle 2, 1, 0.5,).look if !spread(3,8).look
    flop :c3, 60, sus: (cycle 2,).look if spread(3,8).look

   # at{sleep 0.5 ; glitch :C3,1}

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :e4, 127, sus: (cycle 1/2.0,).look if spread(1,1).look
    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1,)
  with_bpm @bpm=(127*(cycle 1, 0.5, 0.5, 1.0,).look) do
    perc_machine perc.to_a
#    at{sleep 0.5; sea circle: 0.0; aura scale: rand*1.6 }
create_sea
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:A3, :C5, :E4], 8],
      [[:F4, :A6, :C5], 8],
      [[:C3, :E5, :G4], 4],
      [Zz, 4],
      #, [[:A3, :C5, :E4], 8],
      #, [[:E4, :G5, :B3], 8],
      #, [[:F4, :A6, :C5, :E5], 8],
      #, [[:C3, :E5, :G4], 8],
      #, [Zz, 8],

      #, [[:A3, :C5, :E4], 8],
      #, [[:F4, :A6, :C5], 8],
      #, [[:C3, :E5, :G4], 4],
      #, [Zz, 4],
      #, [[:A3, :C5, :E4], 4],
      #, [[:A3, :C5, :E4], 4],
      #, [[:E4, :G5, :B3], 4],
      #, [[:E4, :G5, :B3], 4],
      #, [[:G4, :B6, :D5, :F4], 8],
      #, [[:C4, :E5, :G4], 8],
      #, [Zz, 8],

      )
    chd = score.look[0]
    sleeps = score.look[-1]

    resonate chd[0]+12,1, sus: sleeps, pads: [0], sat: 0, drive: 0

    control_unit root(chd), 10,sus: sleeps, drive: 0.1, sat: 0.0

#    at{sleep 0.5; create_sea; sleep 0.5 ; cam :chase}

    sleep sleeps/2.0

    # with_swing((flow 0.0, sleeps/2.0, 64,).look){
    #   overclock :b4,21, sus: 1/2.0, motion: rand*0.5
    # }
    # resonate :d4,5, sus: sleeps, pads: [2], sat: 0, drive: 0.9


    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
