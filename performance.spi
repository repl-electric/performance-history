load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 0, pitch: 1, kick: 0


# at{
#   sync :Attune
#   sleep 2
#   flop_off :d2
#   flop_on :d3
# }
#flop_x
#create_aura
live_loop :Attune, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm @bpm=(127) do
#    tick_reset_all
    flop_cc motion: (flow 0.0 0.57 64).look, drive: (flow 0.0 0.32 32).look

    flip :g3, 30, sus: (cycle 0.25 0.5 1).look if spread(1,1).look
    flop :e3, 60, sus: (cycle 0.25 0.5 1).rot(-1).look if spread(1,1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :g3, 60, sus: (cycle 1).look if spread(1,1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :e3, 60, sus: (cycle 1 2).look if !spread(3,8).look
    flop :c3, 85, sus: (cycle 2 0.5 1).look if spread(3,8).look

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :e3, 80, sus: (cycle 1/2.0).look if spread(1,1).look

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0)
  with_bpm @bpm=(127*(cycle 1).look) do
    perc_machine perc.to_a
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:g2] 4]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd[0]+12,1, sus: sleeps, pads: [0], sat: 0, drive: 0
    sleep sleeps/2.0

    with_swing((flow 0.0 sleeps/2.0 64).look){
      overclock :b4, 15, sus: 1/2.0, motion: 0.3
    }
    resonate :d4,1, sus: sleeps/2.0, pads: [1], sat: 0, drive: 0.30


    sleep sleeps/2.0

  end
end

live_loop(:unsyncable)do;sleep 1.0;end
