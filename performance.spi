load_support('piezoelectric_resonator'); use_bpm 127
alive perc: 1, sop: 0

#flop_on :d2
at{
  # sync :unsyncable
  # sleep 1/6.0
  # overclock_on :E3
}
#slow_init
# livecode :sleep
# overclock_cc motion: 0.27


live_loop :Attune, sync: :unsyncable do; tick
  silence?
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.4, 0.5, 32,).look
    flip :A3, sus: (cycle 0.5, 0.25, 1,).look
    flip :E3, sus: (cycle 0.5, 0.25, 1,).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/2.0

    alu (cycle :g3, :e3, :a3,).look, y: 1,viz: true if spread(7,11).look
    alu (cycle_rep :g4, 4, :e3, 4, :a3, 4, :g3, 4, :e3, 4, :c4, 4,).look, y:1 ,viz: true if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if spread(3,8).look
      flop_cc motion: 0.4
      flop :C3, sus: 4
    else
      flop_cc motion: 0.5
      flop :e3, sus: 4
    end

    sleep 1/2.0
    sleep 1/2.0

    flop :C4,127, sus: 1/2.0

    sleep 1/2.0
    sleep 1/2.0
  end
end
#vortex throttle: 0
live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,)
  with_bpm 127*(cycle 1,).look do
    perc_machine perc.to_a
  end
end
#roots_chase target: :start
#roots_chase force: 20, freq: 0.2, thick: 0.2, noise: 1,amp: 0.3, drag: 2
live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
#    cam :chase
    score = (cycle
      [[:A3, :C5, :E4], 8],
      [[:F4, :A6, :C5], 8],
      [[:C3, :E5, :G4], 4],
      [Zz, 4],
      [[:A3, :C5, :E4], 8],
      [[:E4, :G5, :B3], 8],
      [[:F4, :A6, :C5, :E5], 8],
      [[:C3, :E5, :G4], 8],
      [Zz, 8],

      [[:A3, :C5, :E4], 8],
      [[:F4, :A6, :C5], 8],
      [[:C3, :E5, :G4], 4],
      [Zz, 4],
      [[:A3, :C5, :E4], 4],
      [[:A3, :C5, :E4], 4],
      [[:E4, :G5, :B3], 4],
      [[:E4, :G5, :B3], 4],
      [[:G4, :B6, :D5, :F4], 8],
      [[:C4, :E5, :G4], 8],
      [Zz, 8],

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,5, sus: sleeps, pads: [0,1], sat: 0, drive: 0
    control_unit root(chd),10, sus: sleeps
    #voltage :e4, 1, sus: 2
    sleep sleeps
  end
end

live_loop(:unsyncable) do;  sleep 1.0;end
