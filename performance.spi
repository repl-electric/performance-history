load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 1, kick: 0



#world time: 0.98
#overclock_on :f4
#overclock_cc attune: 0.50
#cam :top

#recover

#stop

# at{
#   sync :Attune
#   sleep 4
# #  flop_on :b2
# }


at{
#  sync :Attune
#  sleep 1.0/8
#  overclock_on :f3
#  livecode :raise
}

#livecode :sleep
#overclock_cc sync: 1
#zoomout

#livecode :begin

fx reverb: 1.00, drive: 0.70

live_loop :Attune, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  silence?
  overclock_cc oct: (cycle 19 0 24).look
  overclock :g4, sus: 4

  with_bpm @bpm=(127*4) do
    flop_cc motion: (flow 0.5 0.52 32).look, drive: 0.36
    flip_cc motion: 0.49, drive: 0.34

    fn = [(method :flop), (method :flip)].choose
    flop :g3, 60, sus: (cycle 0.25 0.5 1).look if spread(1,1).look
    fn.(:e3, 60, sus: (cycle 0.25 0.5 1).rot(-1).look) if spread(1,1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0


    if spread(3,8).rot(1).look
      flop_cc motion: 0.4
#      flop :c4, 120, sus: 2
    else
      flop_cc motion: 0.3
#      flop :e3, 100, sus: (cycle 1).look if spread(1,1).look
    end

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :c4, 127, sus: (cycle 1/2.0).look if spread(1,1).look

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 0 0  1 0 1 0  1 0 0 0  0 0 0 0)
  with_bpm 127*(cycle 1).look do
#    perc_machine perc.to_a
#    sea circle: rand
    #    aura scale: rand*1.3

    with_swing((flow 0.0 1/4.0 64).look){
#      glitch :c3 if spread(4,8).look
#      glitch_cc corode: rand
    }
    sleep 1/4.0

  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      # [[:A3 :C5 :E4] 8]
      # [[:E4 :G5 :B3] 8]
      # [[:F4 :A6 :C5 :E5] 8]
      # [[:C3 :E5 :G4] 8]
      # [Zz 8]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :E5 :G4] 4]
      # [Zz 4]
      # [[:A3 :C5 :E4] 4]
      # [[:A3 :C5 :E4] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:G4 :B6 :D5 :F4] 8]
      # [[:C4 :E5 :G4] 8]
      # [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd[0]+12,10, sus: sleeps, pads: [0], sat: 0, drive: 0

    control_unit root(chd), 10,sus: sleeps, drive: 0.40, sat: 0.50
    #at{sleep 0.5; create_sea; sleep 0.5; cam :chase}

    sleep sleeps/2.0

    with_swing((flow 0.0 sleeps/2.0 64).look){
#      create_aura
#      resonate :g3,1,  sus: sleeps*2, pads: [2], sat: 0, drive: 0.69
#      overclock :f4,6, sus: 1/4.0, motion: rand*0.5
#      voltage chd[0],1
    }



    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
