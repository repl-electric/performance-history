load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1
init true && start_init

#flop_on :d2,127

live_loop :Attune, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.27 0.5 32).look
    flop :a3,127, sus: (cycle 0.25 0.5 1).look #if spread(7,11).look
    flop :e3,127, sus: (cycle 0.25 0.5 1).rot(-1).look #if spread(7,11).look

    sleep 1/4.0
    sleep 1/4.0

    #flip :a3,100

    sleep 1/4.0
    sleep 1/4.0

    alu (cycle :g3 :a3 :e3).look,(flow 0.0 127.0 32).look, sus: (flow 0.0 1.0 32).look if spread(7,11).look

    voltage :fs4,127, sus: 1/2.0
    #flip :a3,100

    sleep 1/4.0
    sleep 1/4.0

    #flip :a3,100

    sleep 1/4.0
    sleep 1/4.0

    voltage :a4,127, sus: 1/2.0

    midi scale(:c2, :major,octaves: 2).choose, channel: 3
    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :c4,127, sus: 1/2.0

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 0 0 0  0 0 0 0   0 0 0 0     0 0 0 0)
  with_bpm 127*(cycle 1.5).look do
    #dark :fs4,127
    operator :A2,85, sus: 1
    #volatage :gs4,127, sus: 1/4.0
    perc_machine perc.to_a
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      # [[:A3 :C5 :E4] 8]
      # [[:E4 :G5 :B3] 8]
      # [[:F4 :A6 :C5 :E5] 8]
      # [[:C3 :E5 :G4] 8]
      # [Zz 8]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :E5 :G4] 4]
      # [Zz 4]
      # [[:A3 :C5 :E4] 4]
      # [[:A3 :C5 :E4] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:G4 :B6 :D5 :F4] 8]
      # [[:C4 :E5 :G4] 8]
      # [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,1, sus: sleeps, pads: [0], sat: 0, drive: 0

    operator chd[-1],100, sus: 12
    with_swing((flow 0.0 sleeps/2.0 64).look){
      operator chd[-2],120, sus: 12
    }

    sleep sleeps/2.0
    with_swing (sleeps/2.0/[4.0,2.0].choose) {
      voltage scale(:c3, :major).choose,127, sus: (cycle 1 6).look
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
