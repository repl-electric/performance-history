load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1

#flop_on :d2, 127

at{
#  sync :unsyncable
#  sleep 1/6.0
#  overclock_on :f3
 # slow_init
#  livecode :raise
}
#overclock_cc motion: 0.27
#livecode :sleep

roots_chase target: :start, force: 110
live_loop :Attune, sync: :unsyncable do; tick
#  silence?
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.27 0.5 32).look
    flip :a3, 127, sus: (cycle 0.25 0.5 1).look if spread(7,11).look
    flip :e3, 127, sus: (cycle 0.25 0.5 1).rot(-1).look if spread(3,8).look


    if spread(7,11).rot(1).look
      flip :a3, 90, sus: 4
    else

    end


    sleep 1/4.0
    sleep 1/4.0

    flip :f3, 90, sus: 1

    sleep 1/4.0
    sleep 1/4.0
    #create_cube

   if spread(7,11).rot(1).look

    else
     flip :g3, 90, sus: 2
    end


    alu (cycle :g3 :a3 :e3).look, z:1 if spread(7,11).look
    alu (cycle_rep :g3 4 :a3 4 :e3 4 :g3 4 :a3 4 :c4 4).look, z:1 if spread(3,8).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if spread(3,8).look
      flop_cc motion: 0.4
      flop :c4, 127, sus: 2
    else
      flop_cc motion: 0.3
      flop :e3, 90, sus: 1
    end



    sleep 1/2.0
    sleep 1/2.0

    sleep 1/2.0

    flop :c4,127, sus: 1/2.0

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 0)
  with_bpm 127*(cycle 1).look do
    perc_machine perc.to_a
  end
end
#create_sea
#cam :chase
#zoomout
#roots_chase target: :slow
live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      # [[:A3 :C5 :E4] 8]
      # [[:E4 :G5 :B3] 8]
      # [[:F4 :A6 :C5 :E5] 8]
      # [[:C3 :E5 :G4] 8]
      # [Zz 8]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :E5 :G4] 4]
      # [Zz 4]
      # [[:A3 :C5 :E4] 4]
      # [[:A3 :C5 :E4] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:G4 :B6 :D5 :F4] 8]
      # [[:C4 :E5 :G4] 8]
      # [Zz 8]

      REST4
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,1, sus: sleeps, pads: [0], sat: 0, drive: 0
    control_unit root(chd), 10,sus: sleeps, drive: 0.0, sat: 0.0


    sleep sleeps/2.0
    with_swing sleeps/4.0 {
      voltage :f4, 1
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
