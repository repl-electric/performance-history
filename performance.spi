load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1, pitch: 1, kick: 0
#init true && start_init

at{ #G A B C D F A
  sync :Attune
  sleep 6  # 2 5 6
#  flop :b3
}
#flop_x
#b2 6
#d3 2

live_loop :Attune, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm @bpm=(127) do
    #tick_reset_all
    flop_cc motion: (flow 0.3 0.5 32).look, drive: (flow 0.0, 0.15,32).look
    flip_cc motion: 0.4
    flip :a3, 40, sus: (cycle 0.25 0.5 1).look if spread(1,1).look
    flop :e3, 60, sus: (cycle 0.25 0.5 1).rot(-1).look if spread(1,1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :g3, 40, sus: (cycle 4.0).look if spread(1,1).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :e3, 40, sus: (cycle 2.0 1).look if !spread(3,8).look
    flop :c3, 40, sus: (cycle 1 2.0 0.5).look if spread(3,8).look

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0
    flop :c4, 40, sus: (cycle 1/2.0).look if spread(1,1).look

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 0 1 0  0 0 0 0  0 0 0 0  0 0 0 0)
  with_bpm @bpm=(127*(cycle 1).look) do
    perc_machine perc.to_a
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:g2] 4]
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd[0]+12,1, sus: sleeps, pads: [0], sat: 0, drive: 0
    sleep sleeps/2.0

    resonate :d4,5, sus: sleeps/2.0, pads: [1], sat: 0, drive: 0.3

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
