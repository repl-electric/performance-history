load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1

#overclock_cc motion: 0.27
#livecode :sleep

roots_chase target: :start, force: 100

live_loop :Attune, sync: :unsyncable do; tick
  silence?
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    kal :g4
    flop_cc motion: (flow 0.37 0.5 32).look
    flip :c3, 127, sus: (cycle 4 0.5 2).look if spread(7,11).look
    flip :b3, 127, sus: (cycle 4 0.5 2).rot(1).look if spread(3,8).look

    if spread(7,11).rot(1).look

    else
      flop :a4, 100, sus: 4
    end


    sleep 1/4.0
    sleep 1/4.0

    if spread(7,11).rot(1).look

    else
      flop :g4, 120, sus: 4
    end




    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    flip :g4, 127, sus: 1, drive: 0.2

    sleep 1/4.0
    sleep 1/4.0


    if spread(3,8).look
      flop_cc motion: 0.5
      flop :c4, 60, sus: 2
    end
    if !spread(3,8).look
      flop_cc motion: 0.4

      flop :e3, 60, sus: 2
    end


    sleep 1/2.0
    sleep 1/2.0

    flop :c4, 127, sus: 1/2.0

    sleep 1/2.0
    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  1 1 1 1  0 0 0 0  0 0 0 0)
  with_bpm 127*(cycle 1).look do
    perc_machine perc.to_a
    sea circle: rand
    aura distort: rand*2, scale: rand*0.5
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 8]
      [[:E4 :G5 :B3] 8]
      [[:F4 :A6 :C5 :E5] 8]
      [[:C3 :E5 :G4] 8]
      [Zz 8]

      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      [[:A3 :C5 :E4] 4]
      [[:A3 :C5 :E4] 4]
      [[:E4 :G5 :B3] 4]
      [[:E4 :G5 :B3] 4]
      [[:G4 :B6 :D5 :F4] 8]
      [[:C4 :E5 :G4] 8]
      [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,1, sus: sleeps, pads: [0,1], sat: 0, drive: 0

 #   cam :chase
    #    create_sea
    zoomout
    control_unit root(chd), 10,sus: sleeps, drive: 0.0, sat: 0.0

    sleep sleeps/2.0

#    voltage :e4,100, sus: 8

    operator chd[-2],100, sus: 12
    with_swing ((flow 0.25 2.0 32).look) {
      operator chd[-1],98, sus: 12
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
