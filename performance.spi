load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 0, pitch: 0, kick: 0

#Lets try and recover the world
#world time: 1.50
#overclock_cc motion: 0.44



#stop



#recover
# sleep 2
# cam :top

# at{
# #  sync :Attune
# #  sleep 4.0
# #  overclock_on :F3, 80, motion: 0.5
# }

#livecode :sleep
overclock_cc attune: 0.52
#zoomout

#livecode :raise
#cam :top
live_loop :Attune, sync: :unsyncable do; tick
  silence? #please?
  zero_delay [2,5,6].shuffle
  overclock :f4,sus: 3
  overclock_cc oct: (cycle 0 -12 0 19).look

  with_bpm @bpm=3*(127) do
    #tick_reset_all
    flop_cc motion: (flow 0.27 0.57 32).look
    flip_cc motion: 0.2

    flip :g4, 127, sus: (cycle 0.25 0.5 1).look if spread(7,11).look
    flop :e4, 127, sus: (cycle 0.25 0.5 1).rot(-1).look if spread(3,8).look

    if spread(7,11).look
 #     flop :b3, 127, sus: 2
    end

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if spread(7,11).look
  #    flop :g4, 127, sus: 2
    end

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    flop :c4, 127, sus: 2 if spread(3,8).look
   # flop :e3, 127, sus: 2 if !spread(3,8).look

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0

    flop :e4, 127, sus: (cycle 1/2.0).look if spread(1,1).look

    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  1 1 1 1  1 1 1 1 1 1 1 1 1)
  with_bpm @bpm=(127*(cycle 1).look) do
    perc_machine perc.to_a
    sea circle: rand
    aura scale: rand*1.5
  end
end

#roots_chase target: :spiral, force: 50

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm @bpm=(127*1) do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      # [[:A3 :C5 :E4] 8]
      # [[:E4 :G5 :B3] 8]
      # [[:F4 :A6 :C5 :E5] 8]
      # [[:C3 :E5 :G4] 8]
      # [Zz 8]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :E5 :G4] 4]
      # [Zz 4]
      # [[:A3 :C5 :E4] 4]
      # [[:A3 :C5 :E4] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:G4 :B6 :D5 :F4] 8]
      # [[:C4 :E5 :G4] 8]
      # [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd[0]+12,5, sus: sleeps, pads: [0,1,2], sat: 0, drive: 0
    control_unit root(chd), 10,sus: sleeps, drive: 0.27, sat: 0.20

#    at{sleep 0.5 ; create_sea; sleep 0.5; cam :chase}
    sleep sleeps/2.0
#    with_swing((flow 0.0 sleeps/2.0 64).look){
#      overclock :f4, 30, sus: 1/2.0, motion: 0.45
#      resonate :f3,127, sus: sleeps, pads: [2], sat: 0.50, drive: 0.76
#    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
