load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1

at{
  sync :unsyncable
#  overclock_on :e3,127
#  livecode :raise
#  slow_init
}

#overclock_cc motion: 0.27
#livecode :sleep

roots_chase target: :spiral, force: 100

live_loop :Attune, sync: :unsyncable do; tick
  silence?
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    kal :f4, (flow 0.0 5.0 32).look

    flop_cc motion: (flow 0.4 0.5 8).look
    flip_cc motion: (flow 0.3 0.5 8).look
    flip :e3, 127, sus: (cycle 1 0.5 2 0.25).look, drive: 0.40  if spread(3,8).look
    flip :a3, 127, sus: (cycle 1 0.5 0.25).look if spread(7,11).look

   if spread(7,11).look
     flip :f3,80, sus: 1
   else
   end

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    if spread(7,11).look

    else
      flop :g3,50, sus: 4
    end


    alu (cycle :g3).look, z: 1 if spread(7,11).look
    alu (cycle_rep :g3 4 :e3 4 :a3 4).look, z: (cycle 1 127).look, sus: (cycle 1 2).look if spread(7,11).look

    # if spread(7,11).look
    #   flip :e3,127, sus: 4
    # else

#    end

    sleep 1/4.0
    sleep 1/4.0

    flip :f3,105, sus: 2

    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0

    if spread(3,8).look
      roots_chase target: :start, force: 100
      flop_cc motion: 0.3
      flop :c4,120, sus: 2
    else
      flop_cc motion: 0.4
      flop :e3,100, sus: 1, drive: 0.40
    end

    sleep 1/2.0

    flop :c4,127, sus: 1/2.0

    sleep 1/2.0
  end
end

#roots_chase target: :slow

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 0)
  with_bpm 127*(cycle 1).look do
    #   perc_machine perc.to_a
    sleep 1
  end
end
#zoomout
#cam :chase

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:A3 :C5 :E4] 8]
      [[:F4 :A6 :C5] 8]
      [[:C3 :E5 :G4] 4]
      [Zz 4]
      # [[:A3 :C5 :E4] 8]
      # [[:E4 :G5 :B3] 8]
      # [[:F4 :A6 :C5 :E5] 8]
      # [[:C3 :E5 :G4] 8]
      # [Zz 8]

      # [[:A3 :C5 :E4] 8]
      # [[:F4 :A6 :C5] 8]
      # [[:C3 :E5 :G4] 4]
      # [Zz 4]
      # [[:A3 :C5 :E4] 4]
      # [[:A3 :C5 :E4] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:E4 :G5 :B3] 4]
      # [[:G4 :B6 :D5 :F4] 8]
      # [[:C4 :E5 :G4] 8]
      # [Zz 8]

      )
    chd = score.look[0]
    sleeps = score.look[-1]
#    resonate chd,1, sus: sleeps, pads: [0], sat: 0, drive: 0

    control_unit root(chd), 10,sus: sleeps, drive: 0.0, sat: 0.0

    voltage :c3,127, sus: sleeps*2

    sleep sleeps/2.0
 #   operator chd[-2], 90, sus: 12
    with_swing((flow 0.0 2.0 32).look){
#      operator chd[-1], 90, sus: 12
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
