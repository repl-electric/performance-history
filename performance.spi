load_support('piezoelectric_resonator'); use_bpm 127; alive perc: 1
init true && start_init

#flop_on :d2,127

live_loop :Attune, sync: :unsyncable do; tick
  zero_delay [2,5,6].shuffle
  with_bpm 127 do
    flop_cc motion: (flow 0.27 0.5 32).look
    flop :d3,127, sus: (cycle 0.25 0.5 1).look #if spread(7,11).look

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0
    sleep 1/4.0

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0
    sleep 1/2.0
  end
end

live_loop :ClockCycle, sync: :unsyncable do; tick
  #sync :MachineInstructions
  perc=(cycle 1 1 1 1  0 0 0 0  0 0 0 0  0 0 0 0)
  with_bpm 127*(cycle 1).look do
    perc_machine perc.to_a
  end
end

live_loop :MachineInstructions, sync: :unsyncable do; tick
  with_bpm 127*1 do
    score = (cycle
      [[:a2] 8]
      [[:f3] 4]
      [[:e3] 4]
      REST4
      )
    chd = score.look[0]
    sleeps = score.look[-1]
    resonate chd,1, sus: sleeps, pads: [0], sat: 0, drive: 0

    operator chd[-1]+12,99, sus: 12
    with_swing((flow 0.0 sleeps/2.0 32).look){
      operator chd[-2]+12,100, sus: 12
    }

    sleep sleeps/2.0
    with_swing (sleeps/2.0/[4.0,2.0].choose) {
      voltage [:f4, :e4].choose,100, sus: (cycle 1 6).look
    }

    sleep sleeps/2.0
  end
end

live_loop(:unsyncable)do;sleep 1.0;end
